#!/usr/bin/env python3

from concurrent.futures import ThreadPoolExecutor
import glob
import os
import argparse
import sys
from hashlib import sha3_256
import json

def calculate_checksum(content):
    if isinstance(content, str):
        content = content.encode()
    if not isinstance(content, bytes):
        raise TypeError(type(content))
    hash = sha3_256(content)
    result = hash.digest().hex()
    return result

def parse_checksum(checksum):
    """Parses checksum and returns it as string.

    Snippet from the Seamless source code (fair use)"""
    if isinstance(checksum, bytes):
        checksum = checksum.hex()
    if isinstance(checksum, str):
        if len(checksum) % 2:
            raise ValueError("Wrong length")
        checksum = bytes.fromhex(checksum)

    if isinstance(checksum, bytes):
        if len(checksum) != 32:
            raise ValueError("Wrong length")
        return checksum.hex()

    if checksum is None:
        return
    raise TypeError(type(checksum))

def err(*args, **kwargs):
    print("ERROR: " + args[0], *args[1:], **kwargs, file=sys.stderr)
    exit(1)

p = argparse.ArgumentParser(description="""Verifies the file contents of a bufferdir. Can be in vault format""")
p.add_argument("bufferdir")
p.add_argument("--nparallel", help="Number of files to check in parallel", default=100, type=int)

args = p.parse_args()
bufferdir = args.bufferdir
if not os.path.isdir(bufferdir):
    err(f"'{bufferdir}' is not a directory")

files = []

def add_files_in_subdir(subdir):
    if subdir is None:
        full_dir = bufferdir
    else:
        full_dir = os.path.join(bufferdir, subdir)
    if not os.path.exists(full_dir):
        return
    for _, _, filenames in os.walk(full_dir):
        for f in filenames:
            try:
                parse_checksum(f)
            except Exception:
                continue
            files.append((f, os.path.join(full_dir, f)))

for dep in ("independent", "dependent"):
    for size in ("small", "big"):
        add_files_in_subdir(os.path.join(dep, size))
add_files_in_subdir(None)

def check_file(checksum, filename):
    try:
        with open(filename, "rb") as f:
            buf = f.read()
        cs = calculate_checksum(buf)
        return (cs == checksum)
    except Exception:
        return False

with ThreadPoolExecutor(max_workers=args.nparallel) as executor:
    correct = executor.map(check_file, (ff[0] for ff in files), (ff[1] for ff in files))

for (ok, (_, filename)) in zip(correct, files):
    if not ok:
        print(f"Remove {filename}")
        os.unlink(filename)
