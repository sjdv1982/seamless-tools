#!/bin/bash 

if [ -z "$SEAMLESS_DOCKER_IMAGE" ]; then
  export SEAMLESS_DOCKER_IMAGE=rpbs/seamless
fi

set -u -e

command=$(python3 -c '''
import sys
import subprocess
#import pty  # NOT WORKING with VSCode

import argparse
parser = argparse.ArgumentParser()

parser.add_argument(
   "--container",
    help="""Name of the Docker container to connect into, e.g. \"jolly_einstein\"". 
If not provided, a running Seamless container will be searched.""",
    nargs="?",
    type=str,
)

parser.add_argument(
   "--image",
    help="Seamless Docker image to search for among running containers",
    type=str
)

parser.add_argument(
   "--existing",
    help="Name of the existing Jupyter kernel file, e.g. \"kernel-65663.json\"",
    nargs="?",
    type=str,
)

args = parser.parse_args()
import os

DOCKER_IMAGE=args.image
if DOCKER_IMAGE is None:
    DOCKER_IMAGE = os.environ.get("SEAMLESS_DOCKER_IMAGE")
    if DOCKER_IMAGE is None:
        DOCKER_IMAGE = "rpbs/seamless"
container = args.container
def run(cmd, *args, **kwargs):
    return subprocess.run(
        cmd.split(),
        *args, **kwargs, 
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        check=False
    )
if container is None:
    result = run("docker ps --filter ancestor={}".format(DOCKER_IMAGE))
    if result.returncode != 0:
        print(result.stdout,file=sys.stderr)
        exit(result.returncode)
    lines = result.stdout.splitlines()
    lines = [l for l in lines if len(l) and l.split()[-1] != "seamless-database-container"]
    if len(lines) < 2:
        print("No running Seamless Docker containers found",file=sys.stderr)
        exit(1)
    if len(lines) > 2:
        print("""*****************************************************
Multiple Seamless Docker containers found
*****************************************************
Do "docker ps --filter ancestor={}", and look at the last field.
It will be something like "jolly_einstein".
Then, run "seamless-jupyter-connect --container jolly_einstein"""
,file=sys.stderr)
        exit(1)
    container = lines[1].decode().strip().split()[-1]
if args.existing is None:
    cmd2 = "~/seamless-scripts/utils/jupyter-console-existing"
else:
    cmd2 = "jupyter console --existing {}".format(args.existing)
cmd = "docker exec -it --user jovyan {} bash -c \"{}\""
existing=""
cmd = cmd.format(container, cmd2) 
# pty.spawn(cmd) ### NOT WORKING with VSCode
print(cmd)
''' $*)
eval $command
